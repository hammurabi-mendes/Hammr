#!/bin/sh

BASEDIR=`pwd`
RUNNINGDIR=$(pwd)

REGISTRYLOC=localhost

COMMONDIR="$BASEDIR/Common/bin/"
LIBDIR="$BASEDIR/lib/"

JGRAPHFILE="$LIBDIR/jgrapht-jdk1.6.jar"
HADOOPFILE="$LIBDIR/hadoop-0.20.2-core.jar"

BINDIRS=$COMMONDIR:$BASEDIR/Client/bin:$BASEDIR/Launcher/bin:$BASEDIR/Manager/bin

# We are memory hungry! Reserve heap space for the JVM
HEAPPARAMS="-XX:-UseGCOverheadLimit -Xms2500M -Xmx2500M"

export CODEBASE="file://${BASEDIR}/Common/bin/"

export CLASSPATH=$BINDIRS:$JGRAPHFILE:$HADOOPFILE

Compile() {
	ant -buildfile $BASEDIR/Common/build.xml         && \
	ant -buildfile $BASEDIR/Client/build.xml         && \
	ant -buildfile $BASEDIR/Manager/build.xml        && \
	ant -buildfile $BASEDIR/Launcher/build.xml       && \
	mkdir $COMMONDIR/org                             && \
	cp -r $LIBDIR/jgrapht-org/jgrapht $COMMONDIR/org
}

Clean() {
	ant -buildfile $BASEDIR/Common/build.xml clean
	ant -buildfile $BASEDIR/Client/build.xml clean
	ant -buildfile $BASEDIR/Manager/build.xml clean
	ant -buildfile $BASEDIR/Launcher/build.xml clean
}

CheckRMIRegistry() {
	if ps ax | grep rmiregistry | grep -v grep > /dev/null
	then
		echo "Registry running -> continuing"
	else
		echo "Registry not running -> giving up"
		exit
	fi
}

RunManager() {
	CheckRMIRegistry

	echo "Running manager: codebase=${CODEBASE} and registry=${REGISTRYLOC}"
	echo "You should have alredy run \"rmiregistry\" on machine ${REGISTRYLOC}"
	java -cp $CLASSPATH $HEAPPARAMS -Dhammr.manager.basedir=$BASEDIR -Djava.rmi.server.location=$REGISTRYLOC -Djava.rmi.server.codebase=$CODEBASE -Djava.security.policy=$BASEDIR/Manager/security.policy manager.ConcreteManager $@ &
}

RunLauncher() {
	echo "Running launcher: codebase=${CODEBASE} and registry=${REGISTRYLOC}"
	java -cp $CLASSPATH $HEAPPARAMS -Djava.rmi.server.location=$REGISTRYLOC -Djava.rmi.server.codebase=$CODEBASE -Djava.security.policy=$BASEDIR/Launcher/security.policy launcher.ConcreteLauncher $@ &
}

RunClient() {
	echo "Running client: codebase=${CODEBASE} and registry=${REGISTRYLOC}"
	java -cp $CLASSPATH $HEAPPARAMS -Dhammr.client.basedir=$RUNNINGDIR -Djava.rmi.server.location=$REGISTRYLOC -Djava.rmi.server.codebase=$CODEBASE -Djava.security.policy=$BASEDIR/Client/security.policy client.Client $@ &
}

RunGenInput() {
	echo "Running the input generator"
	java -cp $CLASSPATH $HEAPPARAMS utilities.counting.CountingInputGenerator $@
}

RunGenOutput() {
	echo "Running the output extractor"
	java -cp $CLASSPATH $HEAPPARAMS utilities.counting.CountingOutputExtractor $@
}

Kill() {
	killall -9 rmiregistry 2>/dev/null
	ps ax -o pid,command | grep ConcreteManager | grep -v grep | xargs kill -9 2>/dev/null
	ps ax -o pid,command | grep ConcreteLauncher | grep -v grep | xargs kill -9 2>/dev/null
}

COMMAND=$1; shift;

case "${COMMAND}" in
    classpath)    echo $CLASSPATH ;;
    compile)      Compile $@ ;;
    clean)        Clean $@ ;;
    manager)      RunManager $@ ;;
    launcher)     RunLauncher $@ ;;
    client)       RunClient $@ ;;
		gen_input)    RunGenInput $@ ;;
		gen_output)   RunGenOutput $@ ;;
    kill)         Kill $@ ;;
    *)            echo "Unrecognized command"; exit 1; ;;
esac

exit 0
